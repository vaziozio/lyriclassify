{"version":3,"sources":["components/Inputs/TextArea.js","components/Outputs/TextList.js","App.js","utils/_axio.js","reportWebVitals.js","index.js"],"names":["Input","value","setValue","name","id","placeholder","disabled","onChange","event","target","TextList","list","emptyMessate","map","item","index","key","App","useState","error","response","setResponse","probs","setProbs","lyrics","setLyrics","setDisabled","useEffect","input","onSuccess","onError","axios","post","body","sentence","headers","then","data","catch","postLyrics","filteredProbs","proba","prob","Object","entries","Math","round","className","predicted","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNAqBeA,MAnBf,YAAsE,IAArDC,EAAoD,EAApDA,MAAOC,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,GAAIC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,SAOvD,OACE,0BACEH,KAAMA,EACNC,GAAIA,EACJC,YAAaA,EACbE,SAXa,SAACC,GACZA,EAAMC,OAAOR,QAAUA,GACzBC,EAASM,EAAMC,OAAOR,QAUtBA,MAAOA,EACPK,SAAUA,KCKDI,MAnBf,YAA2C,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,aACxB,OACE,mCACID,EAGAA,EAAKE,KAAI,SAACC,EAAMC,GACd,IAAQC,EAAeF,EAAfE,IAAKf,EAAUa,EAAVb,MACb,OACE,+BACGe,EADH,KACUf,IADDc,MALb,6BAAKH,O,8BC2DEK,MAxDf,WACE,MAAgCC,mBAAS,CAAEC,OAAO,IAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA0BH,mBAAS,IAAnC,mBAAOI,EAAP,KAAcC,EAAd,KACA,EAA4BL,mBAAS,IAArC,mBAAOM,EAAP,KAAeC,EAAf,KACA,EAAgCP,oBAAS,GAAzC,mBAAOZ,EAAP,KAAiBoB,EAAjB,KA0BA,OAxBAC,qBAAU,WACJH,GCdkB,SACxBI,EACAP,GAGI,IAFJQ,EAEG,uDAFS,aACZC,EACG,uDADO,aAEVC,IACGC,KAAK,oDAAqD,CACzDC,KAAM,CAAEC,SAAUN,GAClBO,QAAS,CAAE,eAAgB,sBAE5BC,MAAK,SAAChB,GACLC,EAAY,aACVF,OAAO,GACJC,EAASiB,OAEdR,EAAUT,MAEXkB,OAAM,SAACnB,GACNE,EAAY,aACVF,OAAO,GACJA,IAELW,EAAQX,MDTEoB,CAAWf,EAAQH,KAC9B,CAACG,IAEJG,qBAAU,WACR,IAAMa,EAAgBpB,EAASqB,MAC3BrB,EAASqB,MAAM5B,KAAI,SAAC6B,GAClB,kBAAqBC,OAAOC,QAAQF,GAAM,GAA1C,GAAO1B,EAAP,KAAYf,EAAZ,KACA,MAAO,CACLe,MACAf,MAAO4C,KAAKC,MAAM,IAAU7C,GAAS,QAGzC,GAEJsB,EAASiB,GAELpB,EAASD,QACXO,GAAY,GACZL,EAAY,CAAEF,OAAO,IACrBM,EAAU,OAEX,CAACL,IAGF,qBAAK2B,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,8BACI3B,EAASD,OAAUK,EAcnB,oBAAIpB,GAAG,cAAP,qBAbA,qCACE,cAAC,EAAD,CACEH,MAAOuB,EACPtB,SAAUuB,EACVtB,KAAK,eACLC,GAAG,eACHC,YAAaC,EAAW,iBAAmB,mBAC3CA,SAAUA,IAEZ,6BAAKc,EAAS4B,YACd,cAAC,EAAD,CAAUrC,KAAMW,EAAOV,aAAa,yBE1CnCqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2209d78a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Input({ value, setValue, name, id, placeholder, disabled }) {\r\n  const onChange = (event) => {\r\n    if (event.target.value !== value) {\r\n      setValue(event.target.value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <textarea\r\n      name={name}\r\n      id={id}\r\n      placeholder={placeholder}\r\n      onChange={onChange}\r\n      value={value}\r\n      disabled={disabled}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\n\r\nfunction TextList({ list, emptyMessate }) {\r\n  return (\r\n    <>\r\n      {!list ? (\r\n        <h3>{emptyMessate}</h3>\r\n      ) : (\r\n        list.map((item, index) => {\r\n          const { key, value } = item;\r\n          return (\r\n            <h3 key={index}>\r\n              {key}: {value}\r\n            </h3>\r\n          );\r\n        })\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TextList;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport Input from \"./components/Inputs/TextArea\";\r\nimport TextList from \"./components/Outputs/TextList\";\r\n\r\nimport { postLyrics } from \"./utils/_axio\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [response, setResponse] = useState({ error: false });\r\n  const [probs, setProbs] = useState([]);\r\n  const [lyrics, setLyrics] = useState(\"\");\r\n  const [disabled, setDisabled] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (lyrics) postLyrics(lyrics, setResponse);\r\n  }, [lyrics]);\r\n\r\n  useEffect(() => {\r\n    const filteredProbs = response.proba\r\n      ? response.proba.map((prob) => {\r\n          const [key, value] = Object.entries(prob)[0];\r\n          return {\r\n            key,\r\n            value: Math.round(10000.0 * value) / 100,\r\n          };\r\n        })\r\n      : [];\r\n\r\n    setProbs(filteredProbs);\r\n\r\n    if (response.error) {\r\n      setDisabled(true);\r\n      setResponse({ error: false });\r\n      setLyrics(\"\");\r\n    }\r\n  }, [response]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <div>\r\n          {!response.error || !lyrics ? (\r\n            <>\r\n              <Input\r\n                value={lyrics}\r\n                setValue={setLyrics}\r\n                name=\"music-lyrics\"\r\n                id=\"music-lyrics\"\r\n                placeholder={disabled ? \"Api offline...\" : \"Enter your music\"}\r\n                disabled={disabled}\r\n              />\r\n              <h2>{response.predicted}</h2>\r\n              <TextList list={probs} emptyMessate=\"Waiting...\" />\r\n            </>\r\n          ) : (\r\n            <h3 id=\"post-result\">Wait...</h3>\r\n          )}\r\n        </div>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import axios from \"axios\";\r\n\r\nexport const postLyrics = (\r\n  input,\r\n  setResponse,\r\n  onSuccess = () => {},\r\n  onError = () => {}\r\n) => {\r\n  axios\r\n    .post(\"https://song-lyrics-classifier.herokuapp.com/pred\", {\r\n      body: { sentence: input },\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    })\r\n    .then((response) => {\r\n      setResponse({\r\n        error: false,\r\n        ...response.data,\r\n      });\r\n      onSuccess(response);\r\n    })\r\n    .catch((error) => {\r\n      setResponse({\r\n        error: true,\r\n        ...error,\r\n      });\r\n      onError(error);\r\n    });\r\n};\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}